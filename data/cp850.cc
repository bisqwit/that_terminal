/* C++ code produced by gperf version 3.1 */
/* Command-line: gperf data/cp850.perf  */
/* Computed positions: -k'1-2' */

#line 12 "data/cp850.perf"

#include <cstring>
#include <cstddef>

struct CP850_character
{
    const char *sequence = "";
    unsigned code = 0;
};
#line 23 "data/cp850.perf"
struct CP850_character;

#define TOTAL_KEYWORDS 128
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 2
#define MIN_HASH_VALUE 0
#define MAX_HASH_VALUE 443
/* maximum key range = 444, duplicates = 0 */

class Perfect_Hash
{
private:
  static inline unsigned int hash (const char *str, size_t len);
public:
  static const struct CP850_character *in_word_set (const char *str, size_t len);
};

inline /*ARGSUSED*/
unsigned int
Perfect_Hash::hash (const char *str, size_t len)
{
  static const unsigned short asso_values[] =
    {
        0, 250, 135, 444, 444, 444, 444, 444, 444, 444,
      444, 444, 130, 444, 444, 444, 125, 444, 444, 444,
      120, 444, 444, 135, 115, 444, 444, 444, 110, 444,
      444, 444, 135, 444, 444, 444, 105, 224, 444, 444,
      444, 444, 444, 444, 100, 444, 444, 444, 444,  15,
      444, 444,  95, 444, 444, 444, 444, 444, 444, 444,
       90, 444, 444, 444, 444, 444, 444, 444, 444, 444,
      444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
       85,  80, 444, 444,  75, 444, 444,  70, 444, 444,
       65, 444, 444,  60, 444, 444,  55, 444, 444,  50,
      444, 444,  45, 444, 444,  40, 444, 444,  35, 444,
      444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
      444, 444, 444, 444, 444, 444, 444, 444,  30, 444,
      444, 444,  25, 444, 444, 444,  20, 444, 444, 444,
      444, 444, 444, 444, 444,  15,  10,   5, 444, 444,
      444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
      219, 214, 209, 204, 199, 194, 189, 184, 179, 174,
      169, 164, 159, 154, 149, 144, 139, 134, 129, 124,
      119, 114, 109, 104,  99,  94,  89,  84,  79,  74,
       69,  64,  59,  54,  49,  44,  39,  34,  29,  24,
       19,  14,   9,   4, 255, 250, 245, 240, 235, 230,
      225, 220, 215, 210, 205, 200, 195, 190, 185, 180,
      175, 170, 165, 160, 155, 150, 145, 140, 135, 130,
      125, 120, 115, 110, 105, 100,  95,  90,  85,  80,
       75,  70,  65,  60,  55,  50,  45,  40,  35,  30,
       25,  20,  15,  10,   5,   0
    };
  return asso_values[static_cast<unsigned char>(str[1])] + asso_values[static_cast<unsigned char>(str[0])];
}

static const unsigned char lengthtable[] =
  {
     2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,
     2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,
     0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,
     0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,
     0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,
     2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,
     2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,
     0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,
     0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,
     0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,
     2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,
     2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,
     0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,
     0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,
     0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,
     2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,
     2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,
     0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,
     0,  0,  2,  2,  0,  0,  0,  2,  2,  0,  0,  0,  2,  2,
     0,  0,  0,  2,  2,  0,  0,  0,  2,  0,  0,  0,  0,  2,
     0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,
     2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,
     0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,
     0,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,
     0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,
     0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2
  };

static const struct CP850_character wordlist[] =
  {
#line 50 "data/cp850.perf"
    {"\000\377", 152},
    {""}, {""}, {""},
#line 109 "data/cp850.perf"
    {"\000\313", 211},
#line 129 "data/cp850.perf"
    {"\000\376", 231},
    {""}, {""}, {""},
#line 108 "data/cp850.perf"
    {"\000\312", 210},
#line 134 "data/cp850.perf"
    {"\000\375", 236},
    {""}, {""}, {""},
#line 42 "data/cp850.perf"
    {"\000\311", 144},
#line 27 "data/cp850.perf"
    {"\000\374", 129},
    {""}, {""}, {""},
#line 110 "data/cp850.perf"
    {"\000\310", 212},
#line 48 "data/cp850.perf"
    {"\000\373", 150},
    {""}, {""}, {""},
#line 26 "data/cp850.perf"
    {"\000\307", 128},
#line 61 "data/cp850.perf"
    {"\000\372", 163},
    {""}, {""}, {""},
#line 44 "data/cp850.perf"
    {"\000\306", 146},
#line 49 "data/cp850.perf"
    {"\000\371", 151},
    {""}, {""}, {""},
#line 41 "data/cp850.perf"
    {"\000\305", 143},
#line 53 "data/cp850.perf"
    {"\000\370", 155},
    {""}, {""}, {""},
#line 40 "data/cp850.perf"
    {"\000\304", 142},
#line 144 "data/cp850.perf"
    {"\000\367", 246},
    {""}, {""}, {""},
#line 97 "data/cp850.perf"
    {"\000\303", 199},
#line 46 "data/cp850.perf"
    {"\000\366", 148},
    {""}, {""}, {""},
#line 80 "data/cp850.perf"
    {"\000\302", 182},
#line 126 "data/cp850.perf"
    {"\000\365", 228},
    {""}, {""}, {""},
#line 79 "data/cp850.perf"
    {"\000\301", 181},
#line 45 "data/cp850.perf"
    {"\000\364", 147},
    {""}, {""}, {""},
#line 81 "data/cp850.perf"
    {"\000\300", 183},
#line 60 "data/cp850.perf"
    {"\000\363", 162},
    {""}, {""}, {""},
#line 66 "data/cp850.perf"
    {"\000\277", 168},
#line 47 "data/cp850.perf"
    {"\000\362", 149},
    {""}, {""}, {""},
#line 141 "data/cp850.perf"
    {"\000\276", 243},
#line 62 "data/cp850.perf"
    {"\000\361", 164},
    {""}, {""}, {""},
#line 69 "data/cp850.perf"
    {"\000\275", 171},
#line 106 "data/cp850.perf"
    {"\000\360", 208},
    {""}, {""}, {""},
#line 70 "data/cp850.perf"
    {"\000\274", 172},
#line 37 "data/cp850.perf"
    {"\000\357", 139},
    {""}, {""}, {""},
#line 73 "data/cp850.perf"
    {"\000\273", 175},
#line 38 "data/cp850.perf"
    {"\000\356", 140},
    {""}, {""}, {""},
#line 65 "data/cp850.perf"
    {"\000\272", 167},
#line 59 "data/cp850.perf"
    {"\000\355", 161},
    {""}, {""}, {""},
#line 149 "data/cp850.perf"
    {"\000\271", 251},
#line 39 "data/cp850.perf"
    {"\000\354", 141},
    {""}, {""}, {""},
#line 145 "data/cp850.perf"
    {"\000\270", 247},
#line 35 "data/cp850.perf"
    {"\000\353", 137},
    {""}, {""}, {""},
#line 148 "data/cp850.perf"
    {"\000\267", 250},
#line 34 "data/cp850.perf"
    {"\000\352", 136},
    {""}, {""}, {""},
#line 142 "data/cp850.perf"
    {"\000\266", 244},
#line 28 "data/cp850.perf"
    {"\000\351", 130},
    {""}, {""}, {""},
#line 128 "data/cp850.perf"
    {"\000\265", 230},
#line 36 "data/cp850.perf"
    {"\000\350", 138},
    {""}, {""}, {""},
#line 137 "data/cp850.perf"
    {"\000\264", 239},
#line 33 "data/cp850.perf"
    {"\000\347", 135},
    {""}, {""}, {""},
#line 150 "data/cp850.perf"
    {"\000\263", 252},
#line 43 "data/cp850.perf"
    {"\000\346", 145},
    {""}, {""}, {""},
#line 151 "data/cp850.perf"
    {"\000\262", 253},
#line 32 "data/cp850.perf"
    {"\000\345", 134},
    {""}, {""}, {""},
#line 139 "data/cp850.perf"
    {"\000\261", 241},
#line 30 "data/cp850.perf"
    {"\000\344", 132},
    {""}, {""}, {""},
#line 146 "data/cp850.perf"
    {"\000\260", 248},
#line 96 "data/cp850.perf"
    {"\000\343", 198},
    {""}, {""}, {""},
#line 136 "data/cp850.perf"
    {"\000\257", 238},
#line 29 "data/cp850.perf"
    {"\000\342", 131},
    {""}, {""}, {""},
#line 67 "data/cp850.perf"
    {"\000\256", 169},
#line 58 "data/cp850.perf"
    {"\000\341", 160},
    {""}, {""}, {""},
#line 138 "data/cp850.perf"
    {"\000\255", 240},
#line 31 "data/cp850.perf"
    {"\000\340", 133},
    {""}, {""}, {""},
#line 68 "data/cp850.perf"
    {"\000\254", 170},
#line 123 "data/cp850.perf"
    {"\000\337", 225},
    {""}, {""}, {""},
#line 72 "data/cp850.perf"
    {"\000\253", 174},
#line 130 "data/cp850.perf"
    {"\000\336", 232},
    {""}, {""}, {""},
#line 64 "data/cp850.perf"
    {"\000\252", 166},
#line 135 "data/cp850.perf"
    {"\000\335", 237},
    {""}, {""}, {""},
#line 82 "data/cp850.perf"
    {"\000\251", 184},
#line 52 "data/cp850.perf"
    {"\000\334", 154},
    {""}, {""}, {""},
#line 147 "data/cp850.perf"
    {"\000\250", 249},
#line 132 "data/cp850.perf"
    {"\000\333", 234},
    {""}, {""}, {""},
#line 143 "data/cp850.perf"
    {"\000\247", 245},
#line 131 "data/cp850.perf"
    {"\000\332", 233},
    {""}, {""}, {""},
#line 119 "data/cp850.perf"
    {"\000\246", 221},
#line 133 "data/cp850.perf"
    {"\000\331", 235},
    {""}, {""}, {""},
#line 88 "data/cp850.perf"
    {"\000\245", 190},
#line 55 "data/cp850.perf"
    {"\000\330", 157},
    {""}, {""}, {""},
#line 105 "data/cp850.perf"
    {"\000\244", 207},
#line 56 "data/cp850.perf"
    {"\000\327", 158},
    {""}, {""}, {""},
#line 54 "data/cp850.perf"
    {"\000\243", 156},
#line 51 "data/cp850.perf"
    {"\000\326", 153},
    {""}, {""}, {""},
#line 87 "data/cp850.perf"
    {"\000\242", 189},
#line 127 "data/cp850.perf"
    {"\000\325", 229},
    {""}, {""}, {""},
#line 71 "data/cp850.perf"
    {"\000\241", 173},
#line 124 "data/cp850.perf"
    {"\000\324", 226},
    {""}, {""}, {""},
#line 153 "data/cp850.perf"
    {"\000\240", 255},
#line 122 "data/cp850.perf"
    {"\000\323", 224},
    {""}, {""}, {""},
#line 94 "data/cp850.perf"
    {"%\000", 196},
#line 125 "data/cp850.perf"
    {"\000\322", 227},
    {""}, {""}, {""},
#line 76 "data/cp850.perf"
    {"%\223", 178},
#line 63 "data/cp850.perf"
    {"\000\321", 165},
    {""}, {""}, {""},
#line 75 "data/cp850.perf"
    {"%\222", 177},
#line 107 "data/cp850.perf"
    {"\000\320", 209},
    {""}, {""}, {""},
#line 74 "data/cp850.perf"
    {"%\221", 176},
#line 114 "data/cp850.perf"
    {"\000\317", 216},
    {""}, {""}, {""},
#line 117 "data/cp850.perf"
    {"%\210", 219},
#line 113 "data/cp850.perf"
    {"\000\316", 215},
    {""}, {""}, {""},
#line 118 "data/cp850.perf"
    {"%\204", 220},
#line 112 "data/cp850.perf"
    {"\000\315", 214},
    {""}, {""}, {""},
#line 121 "data/cp850.perf"
    {"%\200", 223},
#line 120 "data/cp850.perf"
    {"\000\314", 222},
    {""}, {""}, {""},
#line 104 "data/cp850.perf"
    {"%l", 206},
#line 57 "data/cp850.perf"
    {"\001\222", 159},
    {""}, {""}, {""},
#line 100 "data/cp850.perf"
    {"%i", 202},
#line 111 "data/cp850.perf"
    {"\0011", 213},
    {""}, {""}, {""},
#line 101 "data/cp850.perf"
    {"%f", 203},
#line 140 "data/cp850.perf"
    {" \027", 242},
    {""}, {""}, {""},
#line 83 "data/cp850.perf"
    {"%c", 185},
    {""}, {""}, {""}, {""},
#line 102 "data/cp850.perf"
    {"%`", 204},
    {""}, {""}, {""}, {""},
#line 86 "data/cp850.perf"
    {"%]", 188},
    {""}, {""}, {""}, {""},
#line 98 "data/cp850.perf"
    {"%Z", 200},
    {""}, {""}, {""}, {""},
#line 85 "data/cp850.perf"
    {"%W", 187},
    {""}, {""}, {""}, {""},
#line 99 "data/cp850.perf"
    {"%T", 201},
    {""}, {""}, {""}, {""},
#line 84 "data/cp850.perf"
    {"%Q", 186},
    {""}, {""}, {""}, {""},
#line 103 "data/cp850.perf"
    {"%P", 205},
    {""}, {""}, {""}, {""},
#line 95 "data/cp850.perf"
    {"%<", 197},
    {""}, {""}, {""}, {""},
#line 91 "data/cp850.perf"
    {"%4", 193},
    {""}, {""}, {""}, {""},
#line 92 "data/cp850.perf"
    {"%,", 194},
    {""}, {""}, {""}, {""},
#line 78 "data/cp850.perf"
    {"%$", 180},
    {""}, {""}, {""}, {""},
#line 93 "data/cp850.perf"
    {"%\034", 195},
    {""}, {""}, {""}, {""},
#line 115 "data/cp850.perf"
    {"%\030", 217},
    {""}, {""}, {""}, {""},
#line 90 "data/cp850.perf"
    {"%\024", 192},
    {""}, {""}, {""}, {""},
#line 89 "data/cp850.perf"
    {"%\020", 191},
    {""}, {""}, {""}, {""},
#line 116 "data/cp850.perf"
    {"%\014", 218},
    {""}, {""}, {""}, {""},
#line 77 "data/cp850.perf"
    {"%\002", 179},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
    {""}, {""},
#line 152 "data/cp850.perf"
    {"%\240", 254}
  };

const struct CP850_character *
Perfect_Hash::in_word_set (const char *str, size_t len)
{
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE)
        if (len == lengthtable[key])
          {
            const char *s = wordlist[key].sequence;

            if (*str == *s && !memcmp (str + 1, s + 1, len - 1))
              return &wordlist[key];
          }
    }
  return 0;
}
#line 154 "data/cp850.perf"


unsigned uni_to_cp850(unsigned character)
{
    if(character < 128)
        return character;

    if(character > 0xffff)
        return 0;

    char source[2];
    source[0] = char(character >> 8);
    source[1] = char(character & 255);

    const CP850_character *cp = Perfect_Hash::in_word_set(source, 2);
    if (!cp)
        return 0;

    return cp->code;
}
