#ifndef bqtFileShareHH
#define bqtFileShareHH
/** @file file/share.hh
 * @brief Facilities for finding share-files (files supplied with program)
 * and cache-files (files generated by program).
 */

#include <string>
#include <string_view>
#include <filesystem>

/** This function is to be called by main().
 * It saves the value of argv[0] so that the files can be located in arg0_path/share/.
 * @param arg0 Value of argv[0]
 */
void SaveArg0(const char* arg0);

/** Attempts to locate a particular file (files supplied with that_terminal).
 * 
 * These directories are searched, in order:
 *     arg0_path/share/ <br>
 *     $HOME/.local/share/that_terminal/ <br>
 *     /home/$USER/.local/share/that_terminal/ <br>
 *     /usr/local/share/ <br>
 *     /usr/share/
 * followed by the extra paths, if given.
 *
 * @param file_to_find  Filename to search for
 * @param extra_paths   Extra paths to search
 *
 * @returns The location where this file is found, if any:
 *          pair(path, std::filesystem::status(path)).
 */
std::pair<std::filesystem::path, std::filesystem::file_status>
    FindShareFile(const std::filesystem::path& file_to_find,
                  std::initializer_list<std::string_view> extra_paths = {});

/** Attempts to locate a particular file (files generated by that_terminal).
 * 
 * These directories are searched, in order:
 *     $HOME/.cache/that_terminal <br>
 *     /home/$USER/.cache/that_terminal <br>
 *     /run/user/$UID <br>
 *     /run/$UID <br>
 *     $TEMP/that_terminal-$UID
 * followed by the extra paths, if given.
 * where $UID stands for value of getuid(), not an environment variable.
 *
 * @param   file_to_find Findname to search for
 * @param   is_file      True if looking for files, false if for directories.
 *
 * @returns Pair(path, std::filesystem::status(path))
 * If is_file = false, returns the path where a directory by given name is found.
 * If is_file = true, returns the path where the file exists
 *                    or where it could be successfully created, whichever is found first.
 */
std::pair<std::filesystem::path, std::filesystem::file_status>
    FindCacheFile(const std::filesystem::path& file_to_find, bool is_file);

#endif
